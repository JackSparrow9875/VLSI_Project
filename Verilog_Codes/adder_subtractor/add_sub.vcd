$date
	Thu Nov  2 17:59:32 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_four_bit_adder_subtractor $end
$scope module UUT $end
$var wire 4 ! A [3:0] $end
$var wire 4 " B [3:0] $end
$var wire 1 # B0 $end
$var wire 1 $ B1 $end
$var wire 1 % B2 $end
$var wire 1 & B3 $end
$var wire 1 ' m $end
$var wire 1 ( c2 $end
$var wire 1 ) c1 $end
$var wire 1 * c0 $end
$var wire 4 + Sum [3:0] $end
$var wire 1 , Carry $end
$scope module fa0 $end
$var wire 1 - a $end
$var wire 1 # b $end
$var wire 1 . c $end
$var wire 1 / c1 $end
$var wire 1 0 c2 $end
$var wire 1 1 c3 $end
$var wire 1 ' c_in $end
$var wire 1 * carry $end
$var wire 1 2 sum $end
$upscope $end
$scope module fa1 $end
$var wire 1 3 a $end
$var wire 1 $ b $end
$var wire 1 4 c $end
$var wire 1 5 c1 $end
$var wire 1 6 c2 $end
$var wire 1 7 c3 $end
$var wire 1 * c_in $end
$var wire 1 ) carry $end
$var wire 1 8 sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 9 a $end
$var wire 1 % b $end
$var wire 1 : c $end
$var wire 1 ; c1 $end
$var wire 1 < c2 $end
$var wire 1 = c3 $end
$var wire 1 ) c_in $end
$var wire 1 ( carry $end
$var wire 1 > sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 ? a $end
$var wire 1 & b $end
$var wire 1 @ c $end
$var wire 1 A c1 $end
$var wire 1 B c2 $end
$var wire 1 C c3 $end
$var wire 1 ( c_in $end
$var wire 1 , carry $end
$var wire 1 D sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xD
xC
0B
0A
z@
1?
x>
x=
0<
0;
z:
19
08
07
x6
05
z4
03
02
x1
x0
1/
z.
1-
x,
bx00 +
1*
x)
x(
0'
0&
0%
1$
1#
b11 "
b1101 !
$end
#10000
x8
1D
x*
1(
1,
0/
00
06
1;
x<
1A
xB
x7
0#
0$
1%
1&
b1xx0 +
02
13
1'
b1111 !
#20000
1>
bx1x0 +
xD
0)
x(
07
0;
0=
03
09
b1001 !
