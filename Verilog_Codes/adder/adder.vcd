$date
	Tue Oct 24 01:27:56 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module four_bit_adder_tb $end
$var wire 4 ! s [3:0] $end
$var wire 1 " Cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$scope module testadd $end
$var wire 1 " Cout $end
$var wire 4 % a [3:0] $end
$var wire 4 & b [3:0] $end
$var wire 4 ' sum [3:0] $end
$var wire 1 ( c4 $end
$var wire 1 ) c3 $end
$var wire 1 * c2 $end
$var wire 1 + c1 $end
$scope module ad0 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 . cin $end
$var wire 1 + cout $end
$var wire 1 / s $end
$upscope $end
$scope module ad1 $end
$var wire 1 0 a $end
$var wire 1 1 b $end
$var wire 1 + cin $end
$var wire 1 * cout $end
$var wire 1 2 s $end
$upscope $end
$scope module ad2 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 * cin $end
$var wire 1 ) cout $end
$var wire 1 5 s $end
$upscope $end
$scope module ad3 $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 ) cin $end
$var wire 1 ( cout $end
$var wire 1 8 s $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
08
07
06
05
04
03
02
01
00
1/
0.
1-
0,
0+
0*
0)
0(
b1 '
b1 &
b0 %
b1 $
b0 #
0"
b1 !
$end
#30000
12
1+
b10 !
b10 '
0/
1,
b1 #
b1 %
#60000
0+
05
1/
b11 !
b11 '
12
0*
0,
10
b10 #
b10 %
#90000
18
1)
b1001 !
b1001 '
02
14
00
13
b101 $
b101 &
b100 #
b100 %
#120000
1"
1(
17
16
b1101 $
b1101 &
b1100 #
b1100 %
#150000
